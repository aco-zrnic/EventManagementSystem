// <auto-generated />
using System;
using EventManagementSystem.Web.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EventManagementSystem.Web.Migrations
{
    [DbContext(typeof(EmContext))]
    [Migration("20230615131821_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EventManagementSystem.Web.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Venue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("venue");

                    b.HasKey("Id")
                        .HasName("pk_events");

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("EventManagementSystem.Web.Entities.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contact_number");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_participants");

                    b.ToTable("participants", (string)null);
                });

            modelBuilder.Entity("EventManagementSystem.Web.Entities.Registration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registration_date");

                    b.Property<int>("TicketId")
                        .HasColumnType("integer")
                        .HasColumnName("ticket_id");

                    b.HasKey("Id")
                        .HasName("pk_registrations");

                    b.HasIndex("TicketId")
                        .IsUnique()
                        .HasDatabaseName("ix_registrations_ticket_id");

                    b.ToTable("registrations", (string)null);
                });

            modelBuilder.Entity("EventManagementSystem.Web.Entities.Sponsor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("integer")
                        .HasColumnName("event_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("SponsorshipLevel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sponsorship_level");

                    b.HasKey("Id")
                        .HasName("pk_sponsors");

                    b.HasIndex("EventId")
                        .HasDatabaseName("ix_sponsors_event_id");

                    b.ToTable("sponsors", (string)null);
                });

            modelBuilder.Entity("EventManagementSystem.Web.Entities.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("integer")
                        .HasColumnName("event_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("pk_staff");

                    b.HasIndex("EventId")
                        .HasDatabaseName("ix_staff_event_id");

                    b.ToTable("staff", (string)null);
                });

            modelBuilder.Entity("EventManagementSystem.Web.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("integer")
                        .HasColumnName("event_id");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("integer")
                        .HasColumnName("participant_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("TicketType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ticket_type");

                    b.HasKey("Id")
                        .HasName("pk_tickets");

                    b.HasIndex("EventId")
                        .HasDatabaseName("ix_tickets_event_id");

                    b.HasIndex("ParticipantId")
                        .HasDatabaseName("ix_tickets_participant_id");

                    b.ToTable("tickets", (string)null);
                });

            modelBuilder.Entity("EventManagementSystem.Web.Entities.Registration", b =>
                {
                    b.HasOne("EventManagementSystem.Web.Entities.Ticket", "Ticket")
                        .WithOne("Registration")
                        .HasForeignKey("EventManagementSystem.Web.Entities.Registration", "TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_registrations_tickets_ticket_id");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("EventManagementSystem.Web.Entities.Sponsor", b =>
                {
                    b.HasOne("EventManagementSystem.Web.Entities.Event", "Event")
                        .WithMany("Sponsor")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sponsors_events_event_id");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventManagementSystem.Web.Entities.Staff", b =>
                {
                    b.HasOne("EventManagementSystem.Web.Entities.Event", "Event")
                        .WithMany("Staff")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_staff_events_event_id");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventManagementSystem.Web.Entities.Ticket", b =>
                {
                    b.HasOne("EventManagementSystem.Web.Entities.Event", "Event")
                        .WithMany("Ticket")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tickets_events_event_id");

                    b.HasOne("EventManagementSystem.Web.Entities.Participant", "Participant")
                        .WithMany("Ticket")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tickets_participants_participant_id");

                    b.Navigation("Event");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("EventManagementSystem.Web.Entities.Event", b =>
                {
                    b.Navigation("Sponsor");

                    b.Navigation("Staff");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("EventManagementSystem.Web.Entities.Participant", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("EventManagementSystem.Web.Entities.Ticket", b =>
                {
                    b.Navigation("Registration")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
